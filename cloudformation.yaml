AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation for Collaborative Text Editor: EC2, S3, DynamoDB, Lambda, API Gateway, Secrets Manager, Backup"

Parameters:
  S3BucketName:
    Description: "The name of the S3 bucket for the collaborative text editor."
    Type: String
    Default: "csci5409-term-project-bucket-1"
  LambdaSourceBucket:
    Description: "S3 bucket name where Lambda function code is stored."
    Type: String
    Default: "csci5409-term-project-zip-files"

Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*
            Principal: "*"

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: term-project-DB
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  #DynamoDB Table Backup Vault
  MyDynamoDBTableBackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: term-project-DB-backup-vault

  #DynamoDB Table Backup Plan
  MyDynamoDBTableBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: term-project-DB-backup-plan
        BackupPlanRule:
          - RuleName: term-project-DB-backup-rule
            TargetBackupVault: !Ref MyDynamoDBTableBackupVault
            ScheduleExpression: cron(0 1 * * ? *) # Daily at 1:00 AM UTC
            StartWindowMinutes: 60 
            CompletionWindowMinutes: 10080 # 7 days
            Lifecycle:
              DeleteAfterDays: 30 
            
  #DynamoDB Table Backup Selection
  MyDynamoDBTableBackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref MyDynamoDBTableBackupPlan
      BackupSelection:
        SelectionName: term-project-DB-backup-selection
        IamRoleArn: !GetAtt MyDynamoDBTableBackupRole.Arn
        Resources:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/term-project-DB

  #DynamoDB Table Backup Role
  MyDynamoDBTableBackupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyDynamoDBTableBackupRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - backup.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: MyDynamoDBTableBackupPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0230bd60aa48260c6
      InstanceType: t2.large
      KeyName: cloudtermproject
      SecurityGroups:
        - Ref: MyEC2SecurityGroup
      Tags:
        - Key: Name
          Value: MyEC2Instance
      UserData:
        # Add you git clone url below
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          sudo yum install -y git
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install --lts
          cd /home/ec2-user
          git clone <URL_TO_YOUR_GIT_REPO>
          cd csci-5409-term-project/frontend-code
          npm install
          npm start

  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and port 3000 access from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  MyGmailAppCode:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "MyGmailAppCode"
      Description: "Secrets for the email used in Collaborative Text Editor Project"
      # Enter the Gmail App Code in the SecretString
      SecretString: !Sub |
        {
          "GmailAppCode": ""
        }

  MyEC2InstanceIP1:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "MyEC2InstanceIP1"
      Description: "Secrets for the EC2 IP used in Collaborative Text Editor Project"
      SecretString: !Sub |
        {
          "EC2InstanceIP": "${MyEC2Instance.PublicIp}"}
  MyCreateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyCreateLambdaFunction
      Description: "Lambda function to create a new file"
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: create-file.zip
      Runtime: nodejs20.x

  MyCheckLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyCheckLambdaFunction
      Description: "Lambda function to check if a file exists"
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: check-file.zip
      Runtime: nodejs20.x

  MyGetLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyGetLambdaFunction
      Description: "Lambda function to get a file"
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: get-file.zip
      Runtime: nodejs20.x

  MySaveLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MySaveLambdaFunction
      Description: "Lambda function to save a file"
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: save-file.zip
      Runtime: nodejs20.x

  MySendEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MySendEmailLambdaFunction
      Description: "Lambda function to send email"
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: send-invite.zip
      Runtime: nodejs20.x

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: MyLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
  #Deine API Gateway REST API
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "CollaborativeTextEditorAPI"
      Description: "API Gateway for Collaborative Text Editor"
      EndpointConfiguration:
        Types:
          - REGIONAL

  #Define API Gateway Resources and Methods
  #CreateFile API
  MyCreateFileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: create
  #CreateFile Options Method
  MyCreateFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyCreateFileResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  #CreateFile POST Method
  MyCreateFilePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyCreateFileResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyCreateLambdaFunction.Arn}/invocations
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  #Define Lambda Permission for API Gateway to invoke create lambda function
  MyCreateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyCreateLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/POST/create"

  #CheckFile API
  MyCheckFileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: doesFileExists
  #CheckFile Options Method (for /doesFileExists)
  MyCheckFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyCheckFileResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  MyFileIdResourceForDoesFileExists:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !Ref MyCheckFileResource
      PathPart: "{fileId}"
  #CheckFile Options Method (for /doesFileExists/{fileId})
  MyCheckFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyFileIdResourceForDoesFileExists
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  #CheckFile GET Method (for /doesFileExists/{fileId})
  MyCheckFileGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyFileIdResourceForDoesFileExists
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyCheckLambdaFunction.Arn}/invocations
        RequestTemplates:
          application/json: !Sub |
            {
              "pathParameters": {
              "fileId": "$input.params('fileId')"
              }
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.path.fileId: true
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  #Define Lambda Permission for API Gateway to invoke check lambda function
  MyCheckLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyCheckLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/GET/doesFileExists/{fileId}"

  #GetFile API
  MyGetFileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: getFileContent
  #getFileContent Options Method ( for /getFileContent)
  MyGetFileContentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyGetFileResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  MyFileIdResourceForGetFile:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !Ref MyGetFileResource
      PathPart: "{fileId}"
  #GetFile Options Method (for /getFileContent/{fileId})
  MyGetFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyFileIdResourceForGetFile
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  #GetFile GET Method (for /getFileContent/{fileId})
  MyGetFileGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyFileIdResourceForGetFile
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyGetLambdaFunction.Arn}/invocations
        RequestTemplates:
          application/json: !Sub |
            {
              "pathParameters": {
              "fileId": "$input.params('fileId')"
              }
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.path.fileId: true
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  #Define Lambda Permission for API Gateway to invoke get lambda function
  MyGetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyGetLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/GET/getFileContent/{fileId}"

  #SaveFile API
  MySaveFileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: save
  #SaveFile Options Method
  MySaveFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MySaveFileResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  #SaveFile PUT Method
  MySaveFilePutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MySaveFileResource
      HttpMethod: PUT
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MySaveLambdaFunction.Arn}/invocations
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.fileId: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  #Define Lambda Permission for API Gateway to invoke save lambda function
  MySaveLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MySaveLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/PUT/save"

  #SendEmail API
  MySendEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "send-email"
  #SendEmail Options Method
  MySendEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MySendEmailResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"
  #SendEmail POST Method
  MySendEmailPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MySendEmailResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MySendEmailLambdaFunction.Arn}/invocations
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  #Define Lambda Permission for API Gateway to invoke create lambda function
  MySendEmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MySendEmailLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/POST/send-email"

  #API Deployment
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MyCreateFilePostMethod
      - MyCheckFileGetMethod
      - MyGetFileGetMethod
      - MySaveFilePutMethod
      - MySendEmailPostMethod
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: term-project

  MyAPIs:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyAPIs
      Description: "API URLs generated from the AWS API Gateway"
      SecretString: !Sub |
        {
          "create-file": "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/term-project/create",
          "check-file": "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/term-project/doesFileExists",
          "get-file": "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/term-project/getFileContent",
          "save-file": "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/term-project/save",
          "send-email": "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/term-project/send-email"
        }

Outputs:
  S3BucketName:
    Value: !Ref MyS3Bucket
    Description: Name of the S3 bucket
